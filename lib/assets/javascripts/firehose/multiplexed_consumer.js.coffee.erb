Firehose.multiplexChannel = "<%= Firehose::Rack::Consumer::MULTIPLEX_CHANNEL %>"

class Firehose.MultiplexedConsumer extends Firehose.Consumer
  @subscriptionQuery: (config) ->
    {
      subscribe: [
        "#{channel}!#{opts.last_sequence || 0}" for channel, opts of config.channels
      ].join(",")
    }

  constructor: (@config = {}) ->
    @messageHandlers = {}
    @config.message ||= @message
    @config.uri += Firehose.multiplexChannel

    @config.params = Firehose.MultiplexedConsumer.subscriptionQuery(@config)

    for channel, opts of @config.channels
      @subscribe(channel, opts)

    super(@config)

  websocketTransport: (config) =>
    new Firehose.MultiplexedWebSocket(config)

  longpollTransport: (config) =>
    new Firehose.MultiplexedLongPoll(config)

  message: (msg) =>
    if handlers = @messageHandlers[msg.channel]
      for handler in handlers
        handler(msg.message)

  subscribe: (channel, opts) =>
    if opts.message
      @messageHandlers[channel] ||= []
      @messageHandlers[channel].push opts.message

  unsubscribe: (channelNames...) =>
    for chan in channelNames
      delete @messageHandlers[chan]
